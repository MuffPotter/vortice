<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="OutDir">
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <RepositoryRootDirectory>$(MSBuildThisFileDirectory)</RepositoryRootDirectory>
    <BinDir>$(RepositoryRootDirectory)bin</BinDir>
    <OutputPath>$([System.IO.Path]::GetFullPath('$(RepositoryRootDirectory)bin\$(Configuration)'))\$(MSBuildProjectName)</OutputPath>
    <BaseIntermediateOutputPath>$([System.IO.Path]::GetFullPath('$(RepositoryRootDirectory)bin\obj\$(MSBuildProjectName)'))\</BaseIntermediateOutputPath>
    <PackageOutputPath>$(BinDir)\Packages\$(Configuration)</PackageOutputPath>
  </PropertyGroup>
  
  <PropertyGroup>
    <Authors>Amer Koleci</Authors>
    <Product>Vortice</Product>
    <Copyright>Copyright Â© Amer Koleci 2018</Copyright>
    <Summary>Cross platform 2D and 3D game engine with support for .NET Standard 2.0, .NET Core, .NET Framework, Xamarin, and UWP.</Summary>
    <NeutralLanguage>en-US</NeutralLanguage>
    <Title>Vortice</Title>
    <PackageLicenseUrl>https://github.com/amerkoleci/vortice/blob/master/LICENSE</PackageLicenseUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageProjectUrl>https://github.com/amerkoleci/vortice</PackageProjectUrl>
    
    <!-- Enable sourcelink support -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <PropertyGroup>
    <IsWindows Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">true</IsWindows>
    <IsMacOS Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsMacOS>
    <IsLinux Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinux>
  </PropertyGroup>

  <!-- Detect platform -->
  <PropertyGroup Condition="$(TargetFramework.StartsWith('net4'))">
    <VorticePlatform>Windows</VorticePlatform>
    <DefineConstants>$(DefineConstants);__DESKTOP__;VORTICE_DESKTOP</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup Condition="$(TargetFramework.StartsWith('netstandard'))">
    <VorticePlatform>NetStandard</VorticePlatform>
    <DefineConstants>$(DefineConstants);NET_STANDARD;VORTICE_NET_STANDARD</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup Condition="$(TargetFramework.StartsWith('uap10.0'))">
    <VorticePlatform>UAP</VorticePlatform>
    <TargetPlatformVersion>10.0.16299.0</TargetPlatformVersion>
    <TargetPlatformMinVersion>10.0.16299.0</TargetPlatformMinVersion>
    <DefineConstants>$(DefineConstants);NET_STANDARD;VORTICE_NET_STANDARD</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework.StartsWith('monoandroid'))">
    <VorticePlatform>Android</VorticePlatform>
    <DefineConstants>$(DefineConstants);VORTICE_ANDROID</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup Condition="$(TargetFramework.StartsWith('xamarinios'))">
    <VorticePlatform>iOS</VorticePlatform>
    <DefineConstants>$(DefineConstants);VORTICE_IOS</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup Condition="$(TargetFramework.StartsWith('xamarinmac'))">
    <VorticePlatform>macOS</VorticePlatform>
    <DefineConstants>$(DefineConstants);__MACOS__;VORTICE_MACOS</DefineConstants>
  </PropertyGroup>
  
  <!-- Workaround for NuGet bug, see https://github.com/AArnott/Nerdbank.GitVersioning/issues/113 -->
  <PropertyGroup>
    <NerdbankGitVersioningVersion>2.1.65</NerdbankGitVersioningVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Nerdbank.GitVersioning" Version="$(NerdbankGitVersioningVersion)" PrivateAssets="all" />
  </ItemGroup>

  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' == 'true' ">
    <Import Project="$(UserProfile)\.nuget\packages\nerdbank.gitversioning\$(NerdbankGitVersioningVersion)\buildCrossTargeting\Nerdbank.GitVersioning.targets"
            Condition="Exists('$(UserProfile)\.nuget\packages\nerdbank.gitversioning\$(NerdbankGitVersioningVersion)\buildCrossTargeting\Nerdbank.GitVersioning.targets')" />
  </ImportGroup>
  <Target Name="FixUpVersion"
      BeforeTargets="_GenerateRestoreProjectSpec"
      DependsOnTargets="GetBuildVersion"
      Condition=" '$(NerdbankGitVersioningTasksPath)' != '' " />

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0-*" PrivateAssets="All"/>
  </ItemGroup>
</Project>
